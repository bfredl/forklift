func main {
  args data len;
  vars row off coloff summa stride curany lastany nextany seensymb value;
  stride := 1;
  loop {
    if (data[stride-1] == 10) break;
    stride := stride + 1;
  }

  summa := 0;
  row := 0;
  off := 0;
  loop {
    //col := 0;
    coloff := off;

    loop {
      //let coloff = off+col;
      let fuldata = data+coloff;
      let first = data[coloff] - 48;
      if (first <|= 9) {
        seensymb := 0;
        value := 0;
        if (coloff > off) { // col > 0
          seensymb := seensymb | (data[coloff-1]);
          if (row > 0) {
            seensymb := seensymb | (data[coloff-stride-1]-46);
          }
          if (stride + off < len) {
            seensymb := seensymb | (data[coloff+stride-1]-46);
          }
        }
        // col := col + 1;
        // coloff := coloff + 1;
        loop {
          if (coloff >= off+stride-1) break;
          // unconditionally consider above and below
          if (row > 0) {
            seensymb := seensymb | (data[coloff-stride-1]-46);
          }
          if (stride + off < len) {
            seensymb := seensymb | (data[coloff+stride-1]-46);
          }
          let next = data[coloff] - 48;
          if (next <|= 9) {
            value := value*10+next;
          } else {
            // consider symbol right to the right of number;
            seensymb := seensymb | (data[coloff]-46);
            break;
          }
        }
        if (seensymb != 0) { // ANY
          summa := summa + value;
        }
      }
      coloff := coloff + 1; // can unconditionally skip one more
      if (coloff >= off+stride-1) break;
    }

    off := off + stride;
    row := row + 1;
    if (off >= len) break;
  }
  return summa;
}
